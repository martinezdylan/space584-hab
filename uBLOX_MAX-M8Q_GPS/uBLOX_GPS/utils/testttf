#!/usr/bin/python
import os
import fnmatch
from PIL import Image, ImageDraw, ImageFont

def recursive_glob(treeroot, pattern):
    results = []
    for base, dirs, files in os.walk(treeroot):
        goodfiles = fnmatch.filter(files, pattern)
        results.extend(os.path.join(base, f) for f in goodfiles)
    return results

base_path = "/usr/share/fonts/truetype/"

ttf_files = recursive_glob(base_path, "*.ttf")

print("%s files" % len(ttf_files))

ystep = 20
y = 0
img=Image.new("RGBA", (500,ystep * len(ttf_files)),(255,255,255))
defont = ImageFont.load_default()
draw = ImageDraw.Draw(img)
for filename in ttf_files:
  font = ImageFont.truetype(filename,14)
  fontname = filename.split('/')[-1]
  draw.text((150,y), fontname, (0, 0, 50), font=defont)
  draw.text((0, y),"This is a test",(0,0,0),font=font)
  del font
  y += ystep
img.save("a_test.png")

img=Image.new("RGBA", (500,ystep * len(ttf_files)),(255,255,255))
draw = ImageDraw.Draw(img)
filename = "/usr/share/fonts/truetype/freefont/FreeSans.ttf"
y = 0
sz = 6
while y < img.size[1]:
  font = ImageFont.truetype(filename, sz)  
  draw.text((0,y), "This is a text size %s" % sz,(0,0,0) , font = font)
  y += font.font.ascent + font.font.descent
  sz += 2
  del font
img.save("b_test.png")

img=Image.new("RGBA", (500,ystep * len(ttf_files)),(255,255,255))
draw = ImageDraw.Draw(img)
filename = "/usr/share/fonts/truetype/freefont/FreeSans.ttf"
font = ImageFont.truetype(filename, 16)  
for i in range(16):
  draw.text((i * 15 + 20, 0), "%x" % i,(0,0,0))
  draw.text((0, i*15 +20), "%02x" %i,(0,0,0))
for i in range(256):
  x = (i % 16) * 15 + 20
  y = (i / 16) * 15 + 20
  draw.text((x,y), "%s" % chr(i) , (0,0,0), font = font)
draw.text((0,300),u"\\/    --    /\\   \x2191 \x2193",(0,0,0), font=font)
del font
img.save("c_test.png") 
